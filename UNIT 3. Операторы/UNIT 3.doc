Урок 3: Операторы 
1.	Унарные, Бинарные, Тернарный - взависмо от количевства операнд с которыми работают
2.	Приоритеты операторов 
3.	Операторы сравнения
4.	Привидение типов 
5.	Логические операторы 
6.	Условне операторы  

Операнд – то, к чему применяется оператор. Например, в умножении 5 * 2 есть два операнда: левый операнд равен 5, а правый операнд равен 2. Иногда их называют «аргументами» вместо «операндов».

Унарные: (! ) (++ , --)  (+ , -) ( ... ) - работают с одним операндом или аргументом 
Бинарные: - с двумя операндами работают или аргументами
(+, -, *, /) 
(>, <, >=, <=, == , ===, !=, !==)
(+=, -=, *=, /=)
(&&, ||)
( = )
( ... )
Тернарный: [условие] ? [значение] : [значение ] - работает с тремя операндами

// Унарный плюс приводит операнд к числу 
⦁	+17; - унарный плюс работает с одним операндом (унарный плюс ничего не делает с числами) 
⦁	+true =1
⦁	+false=0
⦁	+'77'; - каждый операнд приводит к числу. // 77
⦁	+"text" // NaN  (not a number)


// Бинарный плюс складывает строки или прибавляет числа
⦁	10 + '5'; число + строка = 105    1 + 3 + "6" = 46     ("24" / 4 = 6)
⦁	'some' + 'text'; - складывает строки (контантенация строк)

// математические операторы приводят операнды к числам 
⦁	const a = 17;
⦁	const b = -a; // -17 ( унарный оператор минус меняет знак операнда и приводит к числу если строка) 
⦁	"24" / 4; // 6
⦁	18 * "3"; // 54
⦁	"9" - "3"; // 6
⦁	"seventeen" / 3; // Nan
⦁	4 * "four"; // Nan
⦁	17 / 0; // Infinity - бесконечность

// Математические операции с undefined возвращают NaN
⦁	undefined + 1; // Nan - любая мат операция с undefined будет давать Nan
⦁	null + 8; // 8 - null приводится к 0
⦁	undefined + '5'; // undefined5
⦁	7 - null; // 7
⦁	5 - undefined; // Nan
⦁	'text' + null; // textnull


// Постфиксная и префиксная форма записи - унарный , работает с одним операндом
Инкремент/декремент
⦁	let num = 17;
⦁	++num; - увеличивает на одну
1.	let num = 17
2.	++ num
3.	18
4.	num
5.	18                           
⦁	num++; - возвращает старое значение 
⦁	num--
⦁	--num
________________________________________________

String (17); // "17"  - преобразование в строку 
String (false);  // "false"
String (null); //"null"
String (0); // "0"    

// === // 
Number ("17''); //17
Number (true); // 1
Number (false); // 0
Number (null); // 0
Number (underfined); // NaN
Number (" 17 "); // 17
Number (" 17d "); //  NaN

// == // Булевые приводят в false / true 
Boolean (null); // false
Boolean (undefined); // false
Boolean (0); // false
Boolean (-0); // false
Boolean (NaN); // false
Boolean (""); // false
Boolean (" "); // true 
Boolean (17); // true
Boolean ("Hello"); // true

( === ) - рекомендуем использовать оператор строгого сравнения  

Приоритет Операторов
1.	Унарные
2.	Бинарные арифметические 
3.	Операторы сравнения 
4.	Присваивание 

Сравнение значений переменных 
Строгое сравнения ( === )  ( !== ) - значение сравниваются как есть 
Нестрогое сравнение ( == ) ( != ) - происходит приведение типов, потом происходит сравнение  
